<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pms.mapper.PmsPlanMapper" >
  <resultMap id="BaseResultMap" type="com.pms.pojo.PmsPlan" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="stu_id" property="stuId" jdbcType="BIGINT" />
    <result column="created" property="created" jdbcType="TIMESTAMP" />
    <result column="expired" property="expired" jdbcType="TIMESTAMP" />
    <result column="status1" property="status1" jdbcType="TINYINT" />
    <result column="status2" property="status2" jdbcType="TINYINT" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="optime" property="optime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="planAssess1ResultMap" type="com.pms.pojo.PlanAssess1">
    <id column="id" property="id"/>
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="stu_id" property="stuId" jdbcType="BIGINT" />
    <result column="created" property="created" jdbcType="TIMESTAMP" />
    <result column="expired" property="expired" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="plan_desc" property="planDesc" jdbcType="LONGVARCHAR" />
    <result column="assessCreated" property="assessDate" jdbcType="TIMESTAMP"/>
    <result column="assess" property="assess" jdbcType="LONGVARCHAR"/>
    <result column="optime" property="optime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="planAssess2ResultMap" type="com.pms.pojo.PlanAssess2">
    <id column="id" property="id"/>
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="stu_id" property="stuId" jdbcType="BIGINT" />
    <result column="created" property="created" jdbcType="TIMESTAMP" />
    <result column="expired" property="expired" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="plan_desc" property="planDesc" jdbcType="LONGVARCHAR" />
    <result column="assess" property="assess" jdbcType="LONGVARCHAR"/>
    <result column="optime" property="optime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="planFJAndSelfJResultMap" type="com.pms.pojo.PlanFJAndSelfJ">
    <id column="id" property="id"/>
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="stu_id" property="stuId" jdbcType="BIGINT" />
    <result column="created" property="created" jdbcType="TIMESTAMP" />
    <result column="expired" property="expired" jdbcType="TIMESTAMP" />
    <result column="plan_desc" property="planDesc" jdbcType="LONGVARCHAR" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="status1" property="status1" jdbcType="TINYINT" />
    <result column="status2" property="status2" jdbcType="TINYINT" />
    <result column="firstJudge" property="firstJudge" jdbcType="LONGVARCHAR"/>
    <result column="selfJudge" property="selfJudge" jdbcType="LONGVARCHAR"/>
  </resultMap>
  <resultMap id="planAllAssessResultMap" type="com.pms.pojo.PlanAllAssess">
    <id column="id" property="id"/>
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="stu_id" property="stuId" jdbcType="BIGINT" />
    <result column="created" property="created" jdbcType="TIMESTAMP" />
    <result column="expired" property="expired" jdbcType="TIMESTAMP" />
    <result column="plan_desc" property="planDesc" jdbcType="LONGVARCHAR" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="status1" property="status1" jdbcType="TINYINT" />
    <result column="status2" property="status2" jdbcType="TINYINT" />
    <result column="assess1" property="assess1" jdbcType="LONGVARCHAR"/>
    <result column="assess2" property="assess2" jdbcType="LONGVARCHAR"/>
    <result column="self_judge" property="selfJudge" jdbcType="LONGVARCHAR"/>
    <result column="created1" property="created1" jdbcType="TIMESTAMP"/>
    <result column="created2" property="created2" jdbcType="TIMESTAMP"/>
    <result column="created3" property="created3" jdbcType="TIMESTAMP"/>
    <result column="grade" property="grade" jdbcType="TINYINT"/>
    <result column="optime" property="optime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="teaTaskResultMap" type="com.pms.pojo.TeaTaskData">
    <id column="stu_id" property="stuId"/>
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="status1" property="status1" jdbcType="TINYINT" />
    <result column="status2" property="status2" jdbcType="TINYINT" />
    <result column="optime" property="optime" jdbcType="TIMESTAMP" />
    <result column="nickname" property="nickname" jdbcType="VARCHAR"/>
    <result column="enroll_date" property="enrollDate" jdbcType="TIMESTAMP" />
    <result column="plan_id" property="planId" jdbcType="BIGINT" />
    <result column="created" property="created" jdbcType="TIMESTAMP" />
    <result column="expired" property="expired" jdbcType="TIMESTAMP"/>
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.pms.pojo.PmsPlan" extends="BaseResultMap" >
    <result column="plan_desc" property="planDesc" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <select id="findTeaTaskData" resultMap="teaTaskResultMap">
SELECT
	*
FROM
	(
		SELECT DISTINCT
			pms_plan.id AS plan_id,
			pms_plan.title,
			pms_plan.status1,
			pms_plan.status2,
			pms_plan.`status`,
			pms_plan.created,
			pms_plan.expired,
			pms_plan.optime,
			pms_user_stu.id AS stu_id,
			pms_user_stu.nickname,
			pms_user_stu.created AS enroll_date
		FROM
			pms_user_stu
		LEFT JOIN pms_plan ON pms_user_stu.id = pms_plan.stu_id
		WHERE
			pms_user_stu.exp_id = #{expId,jdbcType=BIGINT}
		ORDER BY
			pms_plan.optime DESC
	) as m
GROUP BY
	m.stu_id
  </select>
  <select id="findPlanAssess1ById" parameterType="java.lang.Long" resultMap="planAssess1ResultMap">
SELECT DISTINCT
pms_plan.title,
pms_plan.plan_desc,
pms_plan.created,
pms_plan.expired,
pms_plan.stu_id,
pms_plan.id,
pms_plan.optime,
pms_tut_assess1.created AS assessCreated,
pms_tut_assess1.assess
FROM
pms_plan
LEFT JOIN pms_tut_assess1 ON pms_plan.id=pms_tut_assess1.plan_id
WHERE pms_plan.id=#{id,jdbcType=BIGINT}
  </select>
  <select id="findPlanAssess2ById" parameterType="java.lang.Long" resultMap="planAllAssessResultMap">
SELECT DISTINCT
    pms_plan.id,
    pms_plan.title,
    pms_plan.stu_id,
    pms_plan.plan_desc,
    pms_plan.created,
    pms_plan.expired,
    pms_plan.optime,
    pms_tut_assess1.assess AS assess1,
    pms_tut_assess1.created AS created1,
    pms_tut_assess2.assess AS assess2,
    pms_tut_assess2.grade,
    pms_tut_assess2.created AS created2
    FROM
    pms_plan
    LEFT JOIN pms_tut_assess1 ON pms_plan.id=pms_tut_assess1.plan_id
    LEFT JOIN pms_tut_assess2 ON pms_plan.id=pms_tut_assess2.plan_id
    WHERE pms_plan.id=#{id,jdbcType=BIGINT}
  </select>
  <select id="findRecentPlanByStuId" parameterType="java.lang.Long" resultMap="planAllAssessResultMap">
    SELECT DISTINCT
    pms_plan.id,
    pms_plan.title,
    pms_plan.stu_id,
    pms_plan.plan_desc,
    pms_plan.created,
    pms_plan.expired,
    pms_plan.status,
    pms_plan.status1,
    pms_plan.status2,
    pms_plan.optime,
    pms_tut_assess1.assess AS assess1,
    pms_tut_assess1.created AS created1,
    pms_tut_assess2.assess AS assess2,
    pms_tut_assess2.grade,
    pms_tut_assess2.created AS created2,
    pms_stu_assess.self_judge,
    pms_stu_assess.created AS created3
    FROM
    pms_plan
    LEFT JOIN pms_tut_assess1 ON pms_plan.id=pms_tut_assess1.plan_id
    LEFT JOIN pms_tut_assess2 ON pms_plan.id=pms_tut_assess2.plan_id
    LEFT JOIN pms_stu_assess ON pms_plan.id=pms_stu_assess.plan_id
    WHERE pms_plan.stu_id=#{stuId,jdbcType=BIGINT}
    AND pms_plan.expired&lt;=CURDATE()
    AND DATE_SUB(CURDATE(), INTERVAL  1 MONTH) &lt;= DATE(pms_plan.expired)
    AND pms_plan.`status`=1
    AND pms_plan.status1=1
    AND pms_plan.status2=1
  </select>
  <select id="findAllPlanByStuId" parameterType="java.lang.Long" resultMap="planAllAssessResultMap">
    SELECT DISTINCT
    pms_plan.id,
    pms_plan.title,
    pms_plan.stu_id,
    pms_plan.plan_desc,
    pms_plan.created,
    pms_plan.expired,
    pms_plan.status,
    pms_plan.status1,
    pms_plan.status2,
    pms_plan.optime,
    pms_tut_assess1.assess AS assess1,
    pms_tut_assess1.created AS created1,
    pms_tut_assess2.assess AS assess2,
    pms_tut_assess2.grade,
    pms_tut_assess2.created AS created2,
    pms_stu_assess.self_judge,
    pms_stu_assess.created AS created3
    FROM
    pms_plan
    LEFT JOIN pms_tut_assess1 ON pms_plan.id=pms_tut_assess1.plan_id
    LEFT JOIN pms_tut_assess2 ON pms_plan.id=pms_tut_assess2.plan_id
    LEFT JOIN pms_stu_assess ON pms_plan.id=pms_stu_assess.plan_id
    WHERE pms_plan.stu_id=#{stuId,jdbcType=BIGINT}
    AND pms_plan.expired&lt;CURDATE()
    AND pms_plan.`status`=1
    AND pms_plan.status1=1
    AND pms_plan.status2=1
  </select>
  <select id="findPlanAllAssessById" parameterType="java.lang.Long" resultMap="planAllAssessResultMap">
    SELECT DISTINCT
    pms_plan.id,
    pms_plan.title,
    pms_plan.stu_id,
    pms_plan.plan_desc,
    pms_plan.created,
    pms_plan.expired,
    pms_plan.status,
    pms_plan.status1,
    pms_plan.status2,
    pms_plan.optime,
    pms_tut_assess1.assess AS assess1,
    pms_tut_assess1.created AS created1,
    pms_tut_assess2.assess AS assess2,
    pms_tut_assess2.grade,
    pms_tut_assess2.created AS created2,
    pms_stu_assess.self_judge,
    pms_stu_assess.created AS created3
    FROM
    pms_plan
    LEFT JOIN pms_tut_assess1 ON pms_plan.id=pms_tut_assess1.plan_id
    LEFT JOIN pms_tut_assess2 ON pms_plan.id=pms_tut_assess2.plan_id
    LEFT JOIN pms_stu_assess ON pms_plan.id=pms_stu_assess.plan_id
    WHERE pms_plan.id=#{id,jdbcType=BIGINT}
  </select>
  <select id="findPlanAssess2ByStuId" parameterType="java.lang.Long" resultMap="planAssess2ResultMap">
    SELECT DISTINCT
    pms_plan.title,
    pms_plan.plan_desc,
    pms_plan.created,
    pms_plan.expired,
    pms_plan.stu_id,
    pms_plan.optime,
    pms_plan.id,
    pms_plan.`status`,
    pms_tut_assess2.assess
    FROM
    pms_plan
    LEFT JOIN pms_tut_assess2 ON pms_plan.id=pms_tut_assess2.plan_id
    WHERE pms_plan.stu_id = #{stuId,jdbcType=BIGINT}
    AND pms_plan.expired&lt;CURDATE()
  </select>
  <select id="findPlanAssess1ByStuId" parameterType="java.lang.Long" resultMap="planAssess1ResultMap">
SELECT DISTINCT
pms_plan.title,
pms_plan.plan_desc,
pms_plan.created,
pms_plan.expired,
pms_plan.optime,
pms_plan.stu_id,
pms_plan.id,
pms_tut_assess1.created AS assessCreated,
pms_tut_assess1.assess
FROM
pms_plan
LEFT JOIN pms_tut_assess1 ON pms_plan.id=pms_tut_assess1.plan_id
WHERE pms_plan.stu_id = #{stuId,jdbcType=BIGINT}
AND pms_plan.expired>=CURDATE()
  </select>
  <select id="findFJAndSelfJById" parameterType="java.lang.Long" resultMap="planFJAndSelfJResultMap">
     SELECT DISTINCT
    pms_plan.id,
    pms_plan.title,
    pms_plan.stu_id,
    pms_plan.plan_desc,
    pms_plan.created,
    pms_plan.expired,
    pms_plan.status,
    pms_plan.status1,
    pms_plan.status2,
    pms_plan.optime,
    pms_tut_assess1.assess AS firstJudge,
    pms_stu_assess.self_judge AS selfJudge
    FROM
    pms_plan
    LEFT JOIN pms_tut_assess1 ON pms_plan.id=pms_tut_assess1.plan_id
    LEFT JOIN pms_stu_assess ON pms_plan.id=pms_stu_assess.plan_id
    WHERE pms_plan.id=#{id,jdbcType=BIGINT}
  </select>
  <sql id="Base_Column_List" >
    id, title, stu_id, created, expired, status1, status2, status, optime
  </sql>
  <sql id="Blob_Column_List" >
    plan_desc
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.pms.pojo.PmsPlanExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from pms_plan
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.pms.pojo.PmsPlanExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from pms_plan
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from pms_plan
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from pms_plan
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.pms.pojo.PmsPlanExample" >
    delete from pms_plan
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.pms.pojo.PmsPlan" >
    insert into pms_plan (id, title, stu_id,
      created, expired, status1,
      status2, status, optime,
      plan_desc)
    values (#{id,jdbcType=BIGINT}, #{title,jdbcType=VARCHAR}, #{stuId,jdbcType=BIGINT},
      #{created,jdbcType=TIMESTAMP}, #{expired,jdbcType=TIMESTAMP}, #{status1,jdbcType=TINYINT},
      #{status2,jdbcType=TINYINT}, #{status,jdbcType=TINYINT}, #{optime,jdbcType=TIMESTAMP},
      #{planDesc,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.pms.pojo.PmsPlan" >
    insert into pms_plan
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="stuId != null" >
        stu_id,
      </if>
      <if test="created != null" >
        created,
      </if>
      <if test="expired != null" >
        expired,
      </if>
      <if test="status1 != null" >
        status1,
      </if>
      <if test="status2 != null" >
        status2,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="optime != null" >
        optime,
      </if>
      <if test="planDesc != null" >
        plan_desc,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="stuId != null" >
        #{stuId,jdbcType=BIGINT},
      </if>
      <if test="created != null" >
        #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="expired != null" >
        #{expired,jdbcType=TIMESTAMP},
      </if>
      <if test="status1 != null" >
        #{status1,jdbcType=TINYINT},
      </if>
      <if test="status2 != null" >
        #{status2,jdbcType=TINYINT},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="optime != null" >
        #{optime,jdbcType=TIMESTAMP},
      </if>
      <if test="planDesc != null" >
        #{planDesc,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.pms.pojo.PmsPlanExample" resultType="java.lang.Integer" >
    select count(*) from pms_plan
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update pms_plan
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.title != null" >
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.stuId != null" >
        stu_id = #{record.stuId,jdbcType=BIGINT},
      </if>
      <if test="record.created != null" >
        created = #{record.created,jdbcType=TIMESTAMP},
      </if>
      <if test="record.expired != null" >
        expired = #{record.expired,jdbcType=TIMESTAMP},
      </if>
      <if test="record.status1 != null" >
        status1 = #{record.status1,jdbcType=TINYINT},
      </if>
      <if test="record.status2 != null" >
        status2 = #{record.status2,jdbcType=TINYINT},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.optime != null" >
        optime = #{record.optime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.planDesc != null" >
        plan_desc = #{record.planDesc,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update pms_plan
    set id = #{record.id,jdbcType=BIGINT},
    title = #{record.title,jdbcType=VARCHAR},
    stu_id = #{record.stuId,jdbcType=BIGINT},
    created = #{record.created,jdbcType=TIMESTAMP},
    expired = #{record.expired,jdbcType=TIMESTAMP},
    status1 = #{record.status1,jdbcType=TINYINT},
    status2 = #{record.status2,jdbcType=TINYINT},
    status = #{record.status,jdbcType=TINYINT},
    optime = #{record.optime,jdbcType=TIMESTAMP},
    plan_desc = #{record.planDesc,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update pms_plan
    set id = #{record.id,jdbcType=BIGINT},
    title = #{record.title,jdbcType=VARCHAR},
    stu_id = #{record.stuId,jdbcType=BIGINT},
    created = #{record.created,jdbcType=TIMESTAMP},
    expired = #{record.expired,jdbcType=TIMESTAMP},
    status1 = #{record.status1,jdbcType=TINYINT},
    status2 = #{record.status2,jdbcType=TINYINT},
    status = #{record.status,jdbcType=TINYINT},
    optime = #{record.optime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.pms.pojo.PmsPlan" >
    update pms_plan
    <set >
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="stuId != null" >
        stu_id = #{stuId,jdbcType=BIGINT},
      </if>
      <if test="created != null" >
        created = #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="expired != null" >
        expired = #{expired,jdbcType=TIMESTAMP},
      </if>
      <if test="status1 != null" >
        status1 = #{status1,jdbcType=TINYINT},
      </if>
      <if test="status2 != null" >
        status2 = #{status2,jdbcType=TINYINT},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="optime != null" >
        optime = #{optime,jdbcType=TIMESTAMP},
      </if>
      <if test="planDesc != null" >
        plan_desc = #{planDesc,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.pms.pojo.PmsPlan" >
    update pms_plan
    set title = #{title,jdbcType=VARCHAR},
      stu_id = #{stuId,jdbcType=BIGINT},
      created = #{created,jdbcType=TIMESTAMP},
      expired = #{expired,jdbcType=TIMESTAMP},
      status1 = #{status1,jdbcType=TINYINT},
      status2 = #{status2,jdbcType=TINYINT},
      status = #{status,jdbcType=TINYINT},
      optime = #{optime,jdbcType=TIMESTAMP},
      plan_desc = #{planDesc,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.pms.pojo.PmsPlan" >
    update pms_plan
    set title = #{title,jdbcType=VARCHAR},
      stu_id = #{stuId,jdbcType=BIGINT},
      created = #{created,jdbcType=TIMESTAMP},
      expired = #{expired,jdbcType=TIMESTAMP},
      status1 = #{status1,jdbcType=TINYINT},
      status2 = #{status2,jdbcType=TINYINT},
      status = #{status,jdbcType=TINYINT},
      optime = #{optime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>